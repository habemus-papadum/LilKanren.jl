using LilKanren


## Contents:
## =======================
## * Basic equivalences
## * Lists
## * "Grammars"
## * Peano Numbers
## * Binary Numbers
## * Logic Puzzles


## basics
slurp() do q, a, b, c, d, e
    ( q     ‚â° (:‚ô£, :‚ô†) )  ‚àß
    ( (a,b) ‚â° q        )  ‚àß
    ( c     ‚â° (1,d)    )  ‚àß
    ( d     ‚â° (1,c)    )
end

## The "Classic"
#############################
function append·µí(o,front,back)
  ‚à®(    # <-- Disjunction
    # The base case
    ‚àß(() ‚â° front,
       o ‚â° back),

    # The recursive case
    fresh(3) do h,t,temp
      ‚àß((h,t)    ‚â° front,
        (h,temp) ‚â° o,
        append·µí(temp,t,back))
    end)
end

## run it forwards
slurp() do q
    append·µí(q,
            ‚ùÄ(:‚úåÔ∏é, :‚úíÔ∏é, :‚úÇÔ∏é, :‚òº),
            ‚ùÄ(:‚òø,:‚ôÜ))
end

## run it backwards
slurp() do front, back
    append·µí(‚ùÄ(:‚úåÔ∏é, :‚úíÔ∏é, :‚úÇÔ∏é, :‚òº,:‚òø),
            front,
            back)
end

##  "Grammars"
## operators
lit·µí(val) = (x) -> x ‚â° ‚ùÄ(val)

‚à•(a,b) = (x) -> a(x) ‚à® b(x)

‚Üí(a,b) = (x) -> begin
  fresh(2) do front,back
    a(front) ‚àß
    b(back)  ‚àß
    @‚òæ append·µí(x,front,back)
  end
end

## internals
g‚òæ(pred) = (val) -> @‚òæ pred(val)
pred‚Åª¬π(pred) = :(v -> st -> g‚òæ($(esc(pred)))(v)(st))
macro g‚òæ(pred)
  pred‚Åª¬π(pred)
end
Base.in(val, relation::Function) = relation(val)


## Booleans
true·µí = lit·µí(:‚úì)
false·µí = lit·µí(:‚úó)
ùîπ·µí =  true·µí ‚à• false·µí
not·µí(o,x) = begin
  true·µí(x)  ‚àß false·µí(o) ‚à®
  false·µí(x) ‚àß true·µí(o)
end

## A random sequence
Œ±Œ≤Œ≥·µí = lit·µí(:Œ±) ‚Üí lit·µí(:Œ≤) ‚Üí lit·µí(:Œ≥)


slurp() do q,r,s
  (q ‚àà ùîπ·µí)     ‚àß
  (r ‚àà ùîπ·µí)     ‚àß
  (s ‚àà Œ±Œ≤Œ≥·µí)
end


## Peano numbers
nat·µí = lit·µí(:‚Ññùüò) ‚à• (lit·µí(:‚úöùüô) ‚Üí @g‚òæ(nat·µí))

slurp() do q
  q ‚àà nat·µí
end


## big endian binary
‚Ññùüò·µí = lit·µí(:‚Ññùüò)
‚Ññùüô·µí  = lit·µí(:‚Ññùüô)

binary·µí = ‚Ññùüò·µí ‚à• @g‚òæ(pos·µí)
pos·µí    = ‚Ññùüô·µí ‚à• @g‚òæ(gtùüô·µí)
gtùüô·µí    = @g‚òæ(pos·µí) ‚Üí (‚Ññùüò·µí ‚à• ‚Ññùüô·µí)


slurp() do q
  q ‚àà binary·µí
end

## catamorphisms
function peano·µíkitty(z,s)
  r = (o,v) -> begin
    ((v ‚â° ‚ùÄ(:‚Ññùüò)) ‚àß z(o)) ‚à®
    fresh(2) do n,o‚Ä≤
      (v ‚â° (:‚úöùüô, n)) ‚àß
      s(o,o‚Ä≤)        ‚àß
      @‚òæ r(o‚Ä≤,n)
    end
  end
end

#############################

even·µí = peano·µíkitty( o ->  true·µí(o),
                     (o,o‚Ä≤) -> not·µí(o,o‚Ä≤))

slurp() do q
  fresh() do parity
    (q ‚àà nat·µí)         ‚àß
    even·µí(parity, q)   ‚àß
    true·µí(parity)
  end
end


#############################
plus·µí(o,x,y) = begin
  plusx·µí = peano·µíkitty(o ->  o ‚â° x,
                       (o,o‚Ä≤) -> o ‚â° (:‚úöùüô,o‚Ä≤))
  plusx·µí(o,y)
end


# Partition 5
slurp() do x,y
  plus·µí(‚ùÄ(:‚úöùüô, :‚úöùüô, :‚úöùüô, :‚úöùüô, :‚úöùüô, :‚Ññùüò), x, y)
end


#############################
mult·µí(o,x,y) = begin
  multx·µí = peano·µíkitty(o ->  o ‚â° ‚ùÄ(:‚Ññùüò),
                       (o,o‚Ä≤) -> plus·µí(o,o‚Ä≤,x) )
  multx·µí(o,y)
end

## Factor 6
slurp() do x,y
  mult·µí(‚ùÄ(:‚úöùüô, :‚úöùüô, :‚úöùüô, :‚úöùüô, :‚úöùüô, :‚úöùüô, :‚Ññùüò), x, y)
end


#########################
## Smullyan Puzzles !!!

# You journey upon an island which has two types of inhabitants:
#   Knights, who always tell the truth
#   and Knaves, who always lie.
#
#  During your travels, you encounter two inhabitants, Will and Dan.
#  Will says, "Dan will say that I'm a Knight"
#
#  Who's who?
#########################

‚ôû·µí = lit·µí(:‚ôû) ## Knights
‚öó·µí = lit·µí(:‚öó)  ## Knaves

Inhabitant·µí = ‚ôû·µí ‚à• ‚öó·µí


function Inhabitant·µíkitty(‚ôû,‚öó)
  r = (o,v) -> begin
    (v ‚àà ‚ôû·µí) ‚àß ‚ôû(o)  ‚à®
    (v ‚àà ‚öó·µí)  ‚àß ‚öó(o)
  end
  r
end

## binary relation
is‚ôû·µí = Inhabitant·µíkitty( o -> true·µí(o),
                          o -> false·µí(o))
shallSay·µí(o,who,what) = begin
  r = Inhabitant·µíkitty( o -> o ‚â° what,
                        o -> not·µí(o,what))
  r(o,who)
end

slurp() do Will, Dan
  fresh(2) do Will‚Ä≤s_Statement,Dan‚Ä≤s_Statement
    shallSay·µí(‚ùÄ(:‚úì),Will,Will‚Ä≤s_Statement)              ‚àß
    shallSay·µí(Will‚Ä≤s_Statement,Dan,Dan‚Ä≤s_Statement)      ‚àß
    is‚ôû·µí(Dan‚Ä≤s_Statement,Will)
  end
end

# Dan's a ‚ôû, can't be sure about that Will....
